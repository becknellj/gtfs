

Below are the tests for the parseFiles method
written by: Andrew Nebel
One test that null pointer is thrown
The other tests file not found is thrown

Andrew Nebel
This test makes sure that if there is no file to parse
that it is thrown up to the importFiles method so that
an alert is thrown to the user.
void parseFilesNullPointer();

Andrew Nebel
This test makes sure that if there are files that do not exist to parse
that it is thrown up to the importFiles method so that
an alert is thrown to the user.
void parseFilesFileNotFound(){

Below are the tests for the filesToTrips method
written by: Andrew Nebel
One tests that the info parsed from the file is in an object and is correct

Andrew Nebel
This test makes sure trips are successfully put into the application
hashtable and that their info is the same as excepted based on the
.txt file they are in
void filesToTripsEqualTrip(){


Below are the tests for Feature2 and its helper methods
written by: Andrew Nebel

Andrew Nebel
This test makes sure that if the data structures
are empty that the user is made aware.
@Test
void emptyDataStructures(){

Andrew Nebel
This test makes sure that the helper method
distance, cannot return a negative double
@Test
void negativeDistance() {

Andrew Nebel
This test makes sure that the zeroFlag
is set high if zero is returned so that
trip can be marked "0*"
@Test
void zeroDistance() {

Below are the tests for Feature3 and its helper methods
written by: Andrew Nebel

Andrew Nebel
This test makes sure that the zeroFlag
is set high if the time is 0 so that
trip can be marked "0*"
@Test
void zeroTime() throws ParseException{

Andrew Nebel
This test makes sure that the helper method
time, cannot return a negative double
@Test
void negativeTime() throws ParseException {

Andrew Nebel
This test makes sure that if the data structures
are empty that the user is made aware.
@Test
void emptyDataStructuresSpeed(){





TESTS FOR FEATURE 12
Author: Jade Becknell
1) making sure that user input is reflected in data structure (when everything is valid
2) making sure that invalid input for trip_id is handles
3) making sure that invalid attribute data is handles

1 of 3
This test makes sure that the user cannot successfully enter invalid attribute values
@Test
void inputEqualsAttributeData() {

2 of 3
This tests to make sure that a user can't update a stop time with invalid input
checks for invalid trip id, time input, and stop sequence
@Test
void invalidAttributeInput()


3 of 3
This test makes sure the user cannot successfully enter an invalid trip id
to specify which stop time group they would like to edit
@Test
void testInvalidTripIdSearch()

Test conducted on Feature 2
Author: Andrew Nebel
This feature was tested via importing the
Milwaukee GTFS files and comparing two separate
Trip program distances compared to those trips'
distances hand calculated.

Test conducted on Feature 4
Author: Andrew Nebel
This feature was tested via importing the
Milwaukee GTFS files and comparing two separate
stop counts from the program compared to those stop counts
hand calculated via a scan of a stopTimes document.

Andrew Nebel
This test makes sure nothing is returned
if data structures empty
@Test
void zeroCheck()

Andrew Nebel
This test makes sure that if the data structures
are empty that the user is made aware.
@Test
void emptyDataStructures()


Daniel Griffith
This test checks input validation on import files
Should throw IllegalArgumentException if a GTFS file is imported as the wrong type of GTFS file
i.e. stops.txt being imported as routes.txt
@Test
void fileImportInputValidationTest()


Code coverage gtfseditor: class 37%, method 7%, line 5%